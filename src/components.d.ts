/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

<<<<<<< HEAD
  interface FillButton {
    'color': string;
    'title': string;
  }
  interface FillButtonAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'title'?: string;
=======
  interface GradientButton {
    'color': string;
    'colorHover': string;
    'text': string;
  }
  interface GradientButtonAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'colorHover'?: string;
    'text'?: string;
>>>>>>> gradient_button
  }

  interface InputTag {
    'color': string;
    'placeholder': string;
  }
  interface InputTagAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'placeholder'?: string;
  }

  interface SliderComponent {
    'color': string;
    'max': number;
    'min': number;
  }
  interface SliderComponentAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'max'?: number;
    'min'?: number;
  }

  interface WelcomeComponent {}
  interface WelcomeComponentAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
<<<<<<< HEAD
    'FillButton': Components.FillButton;
=======
    'GradientButton': Components.GradientButton;
>>>>>>> gradient_button
    'InputTag': Components.InputTag;
    'SliderComponent': Components.SliderComponent;
    'WelcomeComponent': Components.WelcomeComponent;
  }

  interface StencilIntrinsicElements {
<<<<<<< HEAD
    'fill-button': Components.FillButtonAttributes;
=======
    'gradient-button': Components.GradientButtonAttributes;
>>>>>>> gradient_button
    'input-tag': Components.InputTagAttributes;
    'slider-component': Components.SliderComponentAttributes;
    'welcome-component': Components.WelcomeComponentAttributes;
  }


<<<<<<< HEAD
  interface HTMLFillButtonElement extends Components.FillButton, HTMLStencilElement {}
  var HTMLFillButtonElement: {
    prototype: HTMLFillButtonElement;
    new (): HTMLFillButtonElement;
=======
  interface HTMLGradientButtonElement extends Components.GradientButton, HTMLStencilElement {}
  var HTMLGradientButtonElement: {
    prototype: HTMLGradientButtonElement;
    new (): HTMLGradientButtonElement;
>>>>>>> gradient_button
  };

  interface HTMLInputTagElement extends Components.InputTag, HTMLStencilElement {}
  var HTMLInputTagElement: {
    prototype: HTMLInputTagElement;
    new (): HTMLInputTagElement;
  };

  interface HTMLSliderComponentElement extends Components.SliderComponent, HTMLStencilElement {}
  var HTMLSliderComponentElement: {
    prototype: HTMLSliderComponentElement;
    new (): HTMLSliderComponentElement;
  };

  interface HTMLWelcomeComponentElement extends Components.WelcomeComponent, HTMLStencilElement {}
  var HTMLWelcomeComponentElement: {
    prototype: HTMLWelcomeComponentElement;
    new (): HTMLWelcomeComponentElement;
  };

  interface HTMLElementTagNameMap {
<<<<<<< HEAD
    'fill-button': HTMLFillButtonElement
=======
    'gradient-button': HTMLGradientButtonElement
>>>>>>> gradient_button
    'input-tag': HTMLInputTagElement
    'slider-component': HTMLSliderComponentElement
    'welcome-component': HTMLWelcomeComponentElement
  }

  interface ElementTagNameMap {
<<<<<<< HEAD
    'fill-button': HTMLFillButtonElement;
=======
    'gradient-button': HTMLGradientButtonElement;
>>>>>>> gradient_button
    'input-tag': HTMLInputTagElement;
    'slider-component': HTMLSliderComponentElement;
    'welcome-component': HTMLWelcomeComponentElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
